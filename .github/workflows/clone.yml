name: Mirror and fix GitLab to Git

on:
  schedule:
    # Run every 6 hours (adjust as needed)
    - cron: '0 */6 * * *'

  workflow_dispatch:
    inputs:
      debug:
        description: 'Run with debug'
        required: false
        default: 'false'
        type: boolean
      dry_run:
        description: 'Run path fixing in dry-run mode'
        required: false
        default: 'false'
        type: boolean

jobs:
  gitlab-mirror-and-fix:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Git SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Debug
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          cd .github/workflows
          sudo chmod +x ./debug.sh
          sudo \
            NGROK_SSH_PUBKEY="${{ secrets.NGROK_SSH_PUBKEY }}" \
            NGROK_TOKEN="${{ secrets.NGROK_TOKEN }}" \
            ./debug.sh
          bash -c 'exec -a "PAUSED_SCRIPT" sleep infinity'

      - name: Setup Git Configuration
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git config --global init.defaultBranch master
          git config --global pull.rebase false
          git config --global core.autocrlf false
          git config --global advice.detachedHead false

      - name: Checkout GIT Repository 
        run: |
          git clone "git@github.com:${{ github.repository }}.git" . --branch master

      - name: Fetch GitLab PulseAudio into gitlab branch
        run: |
          GITLAB_URL="https://gitlab.freedesktop.org/pulseaudio/pulseaudio.git"
          
          # Add GitLab remote if it doesn't exist
          echo "Adding GitLab remote..."
          if ! git remote get-url gitlab >/dev/null 2>&1; then
            git remote add r-gitlab "$GITLAB_URL"
          fi
          
          # Fetch all content from GitLab
          echo "Fetching from GitLab..."
          git fetch r-gitlab --prune --tags
          
          # Create or update the gitlab branch with GitLab's master
          echo "Setting up gitlab branch..."
          if git show-ref --verify --quiet refs/heads/gitlab; then
            echo "Updating existing gitlab branch..."
            git checkout gitlab
            git reset --hard r-gitlab/master
          else
            echo "Creating new gitlab branch from GitLab master..."
            git checkout -b gitlab r-gitlab/master
          fi
          
          # Show current state for debugging
          echo "Current branch:"
          git branch --show-current
          echo "Git log:"
          git log --oneline -5 2>/dev/null || echo "No commits yet"
          echo "All references:"
          git show-ref
          echo "All remotes:"
          git remote -v
          echo "All branches:"
          git branch -a
          echo "All tags:"
          git tag -l

      - name: Run Windows Path Fixer on GitLab Content and then Merge
        shell: pwsh
        env:
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: |
          # Windows Path Fixer PowerShell Script for Git branch
          
          $InvalidChars = @('<', '>', ':', '"', '|', '?', '*')
          $ReservedNames = @('CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9')
          
          function Get-VersionSortKey {
              param([string]$VersionTag)
              
              # Simple regex to extract major.minor.patch (patch optional)
              if ($VersionTag -match "^v(\d+)\.(\d+)(?:\.(\d+))?") {
                  $major = [int]$matches[1]
                  $minor = [int]$matches[2]
                  $patch = if ($matches[3]) { [int]$matches[3] } else { 0 }
                  
                  # Create sortable number: major * 1000000 + minor * 1000 + patch
                  return $major * 1000000 + $minor * 1000 + $patch
              }
              
              # If it doesn't match the pattern, return 0 (will sort alphabetically among non-matches)
              return 0
          }
          
          function Test-WindowsValidPath {
              param([string]$Path)
              
              $pathParts = $Path -split '[\\/]'
              
              foreach ($part in $pathParts) {
                  if ([string]::IsNullOrWhiteSpace($part)) { continue }
                  
                  foreach ($char in $InvalidChars) {
                      if ($part.Contains($char)) {
                          return $false, "Contains invalid character: $char"
                      }
                  }
                  
                  if ($part.EndsWith('.') -or $part.EndsWith(' ')) {
                      return $false, "Ends with dot or space"
                  }

                  $baseName = ($part -split '\.')[0].ToUpper()
                  if ($ReservedNames -contains $baseName) {
                      return $false, "Uses reserved name: $baseName"
                  }
                  
              }
              
              return $true, ""
          }
          
          function Get-SafePath {
              param([string]$OriginalPath)
              
              $pathParts = $OriginalPath -split '[\\/]'
              $safeParts = @()
              
              foreach ($part in $pathParts) {
                  if ([string]::IsNullOrWhiteSpace($part)) { continue }
                  
                  foreach ($char in $InvalidChars) {
                      $part = $part.Replace($char, '_')
                  }
                  
                  $part = $part.TrimEnd('.', ' ')
                  
                  $baseName = ($part -split '\.')[0].ToUpper()
                  if ($ReservedNames -contains $baseName) {
                      $extension = if ($part.Contains('.')) { $part.Substring($part.LastIndexOf('.')) } else { '' }
                      $part = "_" + $baseName + "_" + $extension
                  }
                  
                  $safeParts += $part
              }
              
              return ($safeParts -join '/')
          }
          
          $isDryRun = $env:DRY_RUN -eq 'true'
          $branch = "gitlab"
          $tmpBranchPrefix = "fix-"
          
          Write-Host "> Windows Path Fixer for Git" -ForegroundColor Cyan
          Write-Host "Processing branch: $branch"
          Write-Host "Dry run mode: $isDryRun"
          
          # Ensure we're on the correct branch
          git checkout $branch
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Failed to checkout $branch branch"
              exit 1
          }
          
          # Get all tags that are reachable from that branch
          $allTags = git tag --merged $branch
          if ($allTags) {
              $filteredTags = $allTags -split "`n" | Where-Object { $_ -ne "" -and $_ -notmatch "^$tmpBranchPrefix" }
              Write-Host "Found $($filteredTags.Count) total tags for branch '$branch'"
              
              # Filter and sort version tags
              $versionTags = $filteredTags | Where-Object { $_ -match "^v\d+" } | Sort-Object {
                  # First sort by numeric version
                  Get-VersionSortKey $_
              }, {
                  # Then sort alphabetically for same versions (handles postfixes like -test1, -dev)
                  $_
              } -Descending
              
              # Get the last 10 version tags
              $tags = $versionTags | Select-Object -First 10
              
              Write-Host "Processing latest 10 version tags:"
              Write-Host "Selected version tags:"
              $tags | ForEach-Object { Write-Host "  $_" }
              Write-Host "Total tags to process: $($tags.Count)"
          } else {
              Write-Host "No tags found for branch '$branch', processing branch tip only"
              $tags = @($branch)
          }
          
          $processedTags = @()
          
          foreach ($tag in $tags) {
              Write-Host ">> Processing tag: $tag" -ForegroundColor Cyan
              
              # Checkout the tag/ref
              git checkout $tag
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "Failed to checkout '$tag', skipping..." -ForegroundColor Red
                  continue
              }
              
              # Create a working branch for this tag
              $workingBranch = "$tmpBranchPrefix$tag"
              git checkout -B $workingBranch
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "Failed to create working branch '$workingBranch', skipping..."
                  continue
              }
              
              # Find all files with Windows-invalid paths
              $allFiles = git ls-tree -r --name-only HEAD
              $invalidFiles = @()
              foreach ($file in $allFiles) {
                  $isValid, $reason = Test-WindowsValidPath -Path $file
                  if (-not $isValid) {
                      $safePath = Get-SafePath -OriginalPath $file
                      $invalidFiles += @{
                          Original = $file
                          Safe = $safePath
                          Reason = $reason
                      }
                  }
              }
              if ($invalidFiles.Count -eq 0) {
                  Write-Host "No Windows-invalid paths found in $tag"
                  $processedTags += $tag
                  continue
              }
              
              # Logging
              Write-Host "Found $($invalidFiles.Count) files with Windows-invalid paths:"
              foreach ($invalid in $invalidFiles) {
                  Write-Host "  $($invalid.Original) -> $($invalid.Safe) ($($invalid.Reason))" -ForegroundColor Green
              }
              
              # Bail out if dry run
              if ($isDryRun) {
                  $processedTags += $tag
                  continue
              }
              
              # Move files to safe paths
              $hasChanges = $false
              foreach ($invalid in $invalidFiles) {
                  $originalPath = $invalid.Original
                  $safePath = $invalid.Safe
                  
                  if ($originalPath -ne $safePath) {
                      # Create directory structure if needed
                      $safeDir = Split-Path -Parent $safePath
                      if ($safeDir -and $safeDir -ne '.') {
                          New-Item -ItemType Directory -Path $safeDir -Force -ErrorAction SilentlyContinue | Out-Null
                      }
                      
                      # Use git mv to preserve history
                      git mv "$originalPath" "$safePath"
                      if ($LASTEXITCODE -eq 0) {
                          Write-Host "Moved: $originalPath -> $safePath"
                          $hasChanges = $true
                      } else {
                          Write-Host "Failed to move: $originalPath -> $safePath" -ForegroundColor Red
                      }
                  }
              }
              if (-not $hasChanges) {
                  $processedTags += $tag
                  continue
              }
              
              # Message
              $commitMessage = "Fix Windows-invalid paths for $tag`n`nMoved $($invalidFiles.Count) files to Windows-compatible paths:`n"
              foreach ($invalid in $invalidFiles) {
                  if ($invalid.Original -ne $invalid.Safe) {
                      $commitMessage += "- $($invalid.Original) -> $($invalid.Safe)`n"
                  }
              }
              
              # Commit the changes
              git commit -m $commitMessage
              if ($LASTEXITCODE -eq 0) {
                  Write-Host "Created commit for $tag with path fixes"
                  $processedTags += $tag
              } else {
                  Write-Host "Failed to create commit for $tag" -ForegroundColor Red
              }
          }
          
          # Return to master branch for merging
          git checkout master
          
          # Merge the gitlab branch first
          if (-not $isDryRun) {
              Write-Host "> Merging gitlab branch into master..." -ForegroundColor Cyan
              git merge gitlab --allow-unrelated-histories --no-ff -m "Merge GitLab PulseAudio updates"
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "Initial gitlab merge failed" -ForegroundColor Red
                  exit 1
              }
              Write-Host "Successfully merged gitlab branch into master"
          }
          
          # Now merge individual tag fix branches and update tags to point to merge commits
          foreach ($tag in $processedTags) {
              $workingBranch = "$tmpBranchPrefix$tag"

              Write-Host ">> Merging fixes for tag: $tag" -ForegroundColor Cyan
              if ($isDryRun) {
                  Write-Host "Dry run: Would merge $workingBranch and update tag $tag"
                  continue
              }
              
              git merge $workingBranch --no-ff -m "Merge fixes for $tag"
              
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "Failed to merge fixes for $tag" -ForegroundColor Red
                  continue
              }

              Write-Host "Successfully merged fixes for $tag"
              
              # Delete the old tag and create a new one pointing to the merge commit
              $tagDeleteResult = git tag -d $tag 2>$null
              if ($LASTEXITCODE -eq 0) {
                  Write-Host "Deleted old tag: $tag"
              }
              
              # Create new tag pointing to the current commit (the merge commit)
              git tag $tag -m "Tag $tag with Windows path fixes merged"
              if ($LASTEXITCODE -eq 0) {
                  $currentCommit = git rev-parse HEAD
                  Write-Host "Updated tag $tag to point to merge commit: $currentCommit" -ForegroundColor Green
              } else {
                  Write-Host "Failed to create new tag for $tag" -ForegroundColor Red
              }
              
              # Clean up the working branch
              Write-Host "Cleaning up working branch: $workingBranch"
              git branch -D $workingBranch
          }
          
          # Store processed tags for summary
          $processedTagsJson = $processedTags | ConvertTo-Json -Compress
          "PROCESSED_TAGS=$processedTagsJson" >> $env:GITHUB_ENV
          
          # Summary
          Write-Host "> Path Fixing and Merging Summary:" -ForegroundColor Cyan
          if ($isDryRun) {
              Write-Host "Dry run completed. No changes were made."
              Write-Host "Would have processed tags:`n  $($processedTags -join "`n  ")"
          } else {
              Write-Host "Path fixing and merging completed."
              Write-Host "Processed and merged tags:`n  $($processedTags -join "`n  ")"
              Write-Host "All tags now point to merge commits in master branch"
          }

      - name: Push changes to GitHub
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "Pushing changes to GitHub..."
          
          # Verify we're on master
          current_branch=$(git branch --show-current)
          if [ "$current_branch" != "master" ]; then
            echo "Not on master branch, checking out master..."
            git checkout master
          fi
          
          # Push the updated master branch
          echo "Pushing updated master branch..."
          git push origin master
          
          if [ $? -eq 0 ]; then
            echo "✅ Successfully pushed master branch"
          else
            echo "❌ Failed to push master branch"
            exit 1
          fi
          
          # Push all tags (including the updated ones)
          echo "Pushing all updated tags..."
          git push origin --tags --force
          
          if [ $? -eq 0 ]; then
            echo "✅ Successfully pushed all tags"
          else
            echo "❌ Failed to push tags"
            exit 1
          fi
          
          echo "All changes successfully pushed to GitHub!"

      - name: Summary
        run: |
          echo "=== PULSEAUDIO MIRROR AND FIX SUMMARY ==="
          echo ""
          echo "**Process Date:** $(date -u)"
          echo "**Current branch:** $(git branch --show-current)"
          echo ""
          echo "All branches:"
          git branch -a
          echo "All tags:"
          git tag -l
          echo "Recent commits on master (last 10):"
          git log --oneline -10
          echo "Total tags: $(git tag -l | wc -l)"
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "**Mode:** Dry Run (no changes made)"
          else
            echo "**Mode:** Full Execution"
            echo "**Latest Commit on Master:**"
            echo '```'
            git log --oneline -1
            echo '```'
            
            # Show which tags were updated
            if [ -n "$PROCESSED_TAGS" ] && [ "$PROCESSED_TAGS" != "null" ]; then
              echo "**Updated Tags (now pointing to merge commits):**"
              processed_tags=$(echo "$PROCESSED_TAGS" | jq -r '.[]' 2>/dev/null || echo "$PROCESSED_TAGS" | tr -d '[]"' | tr ',' '\n')
              while IFS= read -r tag; do
                if [ -n "$tag" ] && [ "$tag" != "null" ]; then
                  commit_hash=$(git rev-parse "$tag" 2>/dev/null || echo "N/A")
                  echo "- $tag -> $commit_hash"
                fi
              done <<< "$processed_tags"
            fi
          fi
          echo ""
          echo "**Process Steps:**"
          echo "1. ✅ Fetched GitLab PulseAudio into 'gitlab' branch"
          echo "2. ✅ Applied Windows path fixes to all tags and branches"
          echo "3. ✅ Merged fixed content into master branch (PowerShell)"
          echo "4. ✅ Updated tags to point to merge commits in master"
          if [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            echo "5. ✅ Pushed all changes and updated tags to GitHub"
          fi
